// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingSystemApi.Context;

#nullable disable

namespace TradingSystemApi.Migrations
{
    [DbContext(typeof(TradingSystemDbContext))]
    partial class TradingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TradingSystemApi.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Barcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Cashier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InventoryMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("InventoryMovementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("SalesDocumentId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("InventoryMovements");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InventoryMovementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InventoryMovementId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesDocumentItemId")
                        .HasColumnType("int");

                    b.Property<int>("StockAfterMovement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryMovementId");

                    b.HasIndex("ProductsId");

                    b.HasIndex("SalesDocumentItemId")
                        .IsUnique();

                    b.ToTable("InventoryMovementDetails");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostNetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("JM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PercentageMargin")
                        .HasColumnType("bit");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCode")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductMargin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Vat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SalesDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("DateOfSale")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("SalesDocuments");

                    b.HasDiscriminator<string>("DocumentType").HasValue("SalesDocument");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SalesDocumentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostNetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesDocumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesDocumentId");

                    b.ToTable("SalesDocumentItems");

                    b.HasDiscriminator().HasValue("SalesDocumentItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastAction")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashierId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdminStore")
                        .HasColumnType("bit");

                    b.Property<bool>("GlobalStore")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InvoiceSale", b =>
                {
                    b.HasBaseType("TradingSystemApi.Entities.SalesDocument");

                    b.HasDiscriminator().HasValue("SalesInvoice");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.ReceiptSale", b =>
                {
                    b.HasBaseType("TradingSystemApi.Entities.SalesDocument");

                    b.HasDiscriminator().HasValue("Receipt");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SupplyInvoice", b =>
                {
                    b.HasBaseType("TradingSystemApi.Entities.SalesDocument");

                    b.HasDiscriminator().HasValue("DeliveryInvoice");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InvoiceSaleItem", b =>
                {
                    b.HasBaseType("TradingSystemApi.Entities.SalesDocumentItem");

                    b.Property<int>("InvoiceSaleId")
                        .HasColumnType("int");

                    b.HasIndex("InvoiceSaleId");

                    b.HasDiscriminator().HasValue("InvoiceSaleItem");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.ReceiptSaleItem", b =>
                {
                    b.HasBaseType("TradingSystemApi.Entities.SalesDocumentItem");

                    b.Property<int>("ReceiptSaleId")
                        .HasColumnType("int");

                    b.HasIndex("ReceiptSaleId");

                    b.HasDiscriminator().HasValue("ReceiptSaleItem");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SupplyInvoiceItem", b =>
                {
                    b.HasBaseType("TradingSystemApi.Entities.SalesDocumentItem");

                    b.Property<int>("SupplyInvoiceId")
                        .HasColumnType("int");

                    b.HasIndex("SupplyInvoiceId");

                    b.HasDiscriminator().HasValue("SupplyInvoiceItem");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Adress", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("Adresses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Barcode", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Product", "Product")
                        .WithMany("Barcodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("Barcodes")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Cashier", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Seller", "Seller")
                        .WithMany("Cashiers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Customer", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Adress", "Adress")
                        .WithOne("Customer")
                        .HasForeignKey("TradingSystemApi.Entities.Customer", "AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("Customers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InventoryMovement", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Cashier", "Cashier")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.SalesDocument", "SalesDocument")
                        .WithOne("InventoryMovement")
                        .HasForeignKey("TradingSystemApi.Entities.InventoryMovement", "SalesDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("SalesDocument");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InventoryMovementDetail", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.InventoryMovement", "InventoryMovement")
                        .WithMany("InventoryMovementDetails")
                        .HasForeignKey("InventoryMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Product", "Products")
                        .WithMany("InventoryMovementDetails")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.SalesDocumentItem", "SalesDocumentItem")
                        .WithOne("InventoryMovementDetail")
                        .HasForeignKey("TradingSystemApi.Entities.InventoryMovementDetail", "SalesDocumentItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryMovement");

                    b.Navigation("Products");

                    b.Navigation("SalesDocumentItem");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Product", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.ProductCategory", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("ProductCategories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SalesDocument", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Cashier", "Cashier")
                        .WithMany("SalesDocuments")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Customer", "Customer")
                        .WithMany("SalesDocuments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("SalesDocuments")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SalesDocumentItem", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Product", "Product")
                        .WithMany("SalesDocumentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.SalesDocument", "SalesDocument")
                        .WithMany("SalesDocumentItems")
                        .HasForeignKey("SalesDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesDocument");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Seller", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Adress", "Adress")
                        .WithOne("Seller")
                        .HasForeignKey("TradingSystemApi.Entities.Seller", "AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("Sellers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Session", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.Cashier", "Cashier")
                        .WithOne("Session")
                        .HasForeignKey("TradingSystemApi.Entities.Session", "CashierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystemApi.Entities.Store", "Store")
                        .WithMany("Sessions")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InvoiceSaleItem", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.InvoiceSale", "InvoiceSale")
                        .WithMany("InvoiceSaleItems")
                        .HasForeignKey("InvoiceSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InvoiceSale");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.ReceiptSaleItem", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.ReceiptSale", "ReceiptSale")
                        .WithMany("ReceiptSaleItems")
                        .HasForeignKey("ReceiptSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiptSale");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SupplyInvoiceItem", b =>
                {
                    b.HasOne("TradingSystemApi.Entities.SupplyInvoice", "SupplyInvoice")
                        .WithMany("SupplyInvoiceItems")
                        .HasForeignKey("SupplyInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupplyInvoice");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Adress", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Seller")
                        .IsRequired();
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Cashier", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("SalesDocuments");

                    b.Navigation("Session")
                        .IsRequired();
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Customer", b =>
                {
                    b.Navigation("SalesDocuments");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InventoryMovement", b =>
                {
                    b.Navigation("InventoryMovementDetails");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Product", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("InventoryMovementDetails");

                    b.Navigation("SalesDocumentItems");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SalesDocument", b =>
                {
                    b.Navigation("InventoryMovement")
                        .IsRequired();

                    b.Navigation("SalesDocumentItems");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SalesDocumentItem", b =>
                {
                    b.Navigation("InventoryMovementDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Seller", b =>
                {
                    b.Navigation("Cashiers");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.Store", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Barcodes");

                    b.Navigation("Customers");

                    b.Navigation("InventoryMovements");

                    b.Navigation("ProductCategories");

                    b.Navigation("Products");

                    b.Navigation("SalesDocuments");

                    b.Navigation("Sellers");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.InvoiceSale", b =>
                {
                    b.Navigation("InvoiceSaleItems");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.ReceiptSale", b =>
                {
                    b.Navigation("ReceiptSaleItems");
                });

            modelBuilder.Entity("TradingSystemApi.Entities.SupplyInvoice", b =>
                {
                    b.Navigation("SupplyInvoiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
